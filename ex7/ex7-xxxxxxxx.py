"""
# 第7回演習課題
**提出時の注意**

* student_id及びファイル名に学籍番号を設定すること。
* Pythonファイル中の型指定を守ること。
* 提出用のPythonファイルのグローバルスコープには、余分な関数呼び出しを書かないこと。デバッグ用に書いたものはすべてコメントアウトすること。Pythonファイルを実行した際に何も実行されないのが正しい状態です。
  ```
  def func(a, b):
      ...
  func(1, 2) <--これが呼び出しです。これをグローバルスコープに書かないでください。
  ```
* オプション演習に取り組まない場合でも、関数の定義を削除しないこと。
"""
student_number = 62101046

#%%
"""
##疎ベクトルドット積

ベクトルの大半がゼロの場合、通常のリスト形式で保存するのは非効率的です。そのため、非零要素とその添え字で表現する、疎ベクトル表現を定義します。例えば、`[0, 0, 1, 8, 0, 0, 0]`は、`[[2, 3], [1, 8]]`と表現します。

２つの疎ベクトルのドット積（内積）を求める関数を書いてください。

例：
```
dot([[1,2,3,4], [1,2,3,4]], [[3,4,5], [3,4,5]])
25
```
"""

def dot(vec1, vec2):
    """
    引数：vec1: list[list[int], list[T]], vec2: list[list[int], list[T]]
          #ジェネリック型Tとは加算と乗算が定義済みの任意の型（int/floatなど）
    返値：T
    """
    sum = 0
    print(vec1[0])
    print(vec2[0])
    for i in range(len(vec1[0])):
        for j in range(len(vec2[0])):
            vec1_index = vec1[0][i]
            vec2_index = vec2[0][j]
            if vec1_index == vec2_index:
              print(vec1_index)
              print(vec2_index)
              vec1_num = vec1[1][i]
              vec2_num = vec2[1][j]
              sum += vec1_num * vec2_num
    return sum

#%%
"""
##ヨセフスの問題

紀元370年ごろに書かれたヨセフスの問題のシミュレーションをします。問題は以下の通りです。
* 窮地に陥ったn人の住人が、人口を減らすために次のような作戦を実行します。
* 彼らは円形に自分たちを配置し、 執行人（住人には含まない）が住人1人が残るまでm人ごとに処刑しながら円を回っていきます。
* ヨセフスは、処刑されないようにどこに座ればいいかを考えます。

2つの整数の入力mとnを受け取り、人々が処刑される順序を表示し、円のどこに座るべきかヨセフスに示すプログラムを書きなさい。
なお、ヨセフスにわかりやすいように、最後に"<= sit here!"と表示すること。

テストケース
```
josephus(5, 9)
5 1 7 4 3 6 9 2 8 <= sit here!
josephus(11, 8)
3 7 5 6 2 8 1 4 <= sit here!
```
"""

def josephus(m, n):
    """
    引数：m: int, n: int
    返値：None
    """
    # 
    residents = []
    ans = ""
    for i in range(n):
        residents_num = i + 1
        residents.append(residents_num)
        
    start_index = 0
    for _ in range(n-1):
        kill_index = start_index + (m - 1)
        if kill_index >= len(residents):
            kill_index %= len(residents)
        ans += str(residents.pop(kill_index)) + " "
        start_index = kill_index
    print(ans + str(residents[0]) + " <= sit here!")


#%%
"""
##カッコの対応付け

この問題では、文字列中の対応するカッコ（`[`と`]`）のペアを調べ、辞書にして返す関数generate_bracket_mapを作ります。
例えば、`s = "x[x + [y]]"`という文字列があった場合、s[1]とs[9]のカッコ、s[6]とs[8]のカッコが対応しているため、{1: 9, 6: 8, 8: 6, 9: 1}が出力されます。`[`と`]`の双方のキーが対応するペアのインデックスをバリューに持っていることに注意してください。

今回実装してもらうアルゴリズムには、「スタック」というデータ構造を用います。スタックは、Last In First Out (LIFO)とも呼ばれるデータ構造で、PushとPopの2つの操作を受け付け、Popは最後にPushされたデータを吐き出します。
今回は、Pythonのリストを用い、Pushをlist.append(xxx)、Popをlist.pop()で再現します。つまり、listは最初にPushされたもの（古いもの）から先頭にデータを保持し、Popでは最後のデータを返すとともにリストから削除します。

カッコの対応付けアルゴリズムは以下の通りです。
```
sのそれぞれの文字のインデックスiについてループ：
    もし、文字が[の場合、スタックにiをPushします。
    もし、文字が]の場合、
        まずスタックからPopします。これが対応する[のインデックスになります。
        bracket_map[i]にポップしたインデックスを設定します（] --> [）。
        同様に、bracket_mapに逆方向のペアを設定します（[ --> ]）。
```

テストケース
```
generate_bracket_map("x[x + [y]]")
{1: 9, 6: 8, 8: 6, 9: 1}
generate_bracket_map("a[b[[c]d[e]]f]")
{1: 13, 3: 11, 4: 6, 6: 4, 8: 10, 10: 8, 11: 3, 13: 1}
```
"""

def generate_bracket_map(string):
    """
    引数：string: str
    返値：dict[int, int]
    """
    stack = []
    bracket_map = {}
    
    for i in range(len(string)):
        if string[i] == "[":
            stack.append(i)
        elif string[i] == "]":
            j = stack.pop()
            bracket_map[i] = j
            bracket_map[j] = i

    return bracket_map


#%%
"""
##オプション演習：BrainFuck

PDFをよく読んで解答してください。取り組まない場合でも、以下の関数を削除しないでください。
"""

def exec_brainfuck(prog):
    """
    引数：prog: str
    返値：None
    """
    memory = [0] * 1024
    idx = 0
    pc = 0
    
    bracket_map = generate_bracket_map(prog)
    
    while pc < len(prog):
        c = prog[pc]
        if c == ">":
            idx += 1
        elif c == "<":
            idx -= 1
        elif c == "+":
            memory[idx] += 1
        elif c == "-":
            memory[idx] -= 1
        elif c == ".":
            print(chr(memory[idx]), end="")
        elif c == ",":
            memory[idx] = ord(input())
        elif c == "[":
            if memory[idx] == 0:
                pc = bracket_map[pc]
        elif c == "]":
            if memory[idx] != 0:
                pc = bracket_map[pc]
        pc += 1
        
        
prog = """
+++++++++[>++++++++>+++++++++++>+++>+<<<<-]>.>++.+++++++..+++.
>+++++.<<+++++++++++++++.>.+++.------.--------.>+.>+.
"""

program1 = """
++++++++++[>++++++++++<-]>>++++++++++>->>>>>>>>>>-->+++++++[->++++++++
++<]>[->+>+>+>+<<<<]+++>>+++>>>++++++++[-<++++<++++<++++>>>]+++++[-<++
++<++++>>]>-->++++++[->+++++++++++<]>[->+>+>+>+<<<<]+++++>>+>++++++>++
++++>++++++++[-<++++<++++<++++>>>]++++++[-<+++<+++<+++>>>]>-->---+[-<+
]-<<[->>>+>++[-->++]-->+++[---<-->+>-[<<++[>]]>++[--+[-<+]->>[-]+++++[
---->++++]-->[->+<]>>[.>]>++]-->+++]---+[-<+]->>-[+>++++++++++<<[->+>-
[>+>>]>[+[-<+>]>+>>]<<<<<<]>>[-]>>>++++++++++<[->->+<<]>[-]>[<++++++[-
>++++++++<]>.[-]]<<++++++[-<++++++++>]<.[-]<<[-<+>]]<<<.<]"""

program2 = """
+++++++++++++++[>++>+++>+++>++++++>++>+++++++>++++>+<<<<<<<<-]>>--.>....
...<.>.......<.>.......<.>.......<.>.......<.>.......<.>.......<.>......
.<.>>>>>>-----.<<+++++++++++++++++++.<++.<+.++++.>>.<<.--.>.>.>--..<<<++
.<-.+++.>>>.>.<.<..<<.>---..>..>.>..<<<.>>.<<<.>>>>..<.<..<.<<.>.>>..>.>
..<<<<.>..>>>..<.<..<+++.<<+.>.>>>.<.>.>.<<<----.++++.>>.<<.--.>>>.<.>>.
<<.<..<--.<<<+++++.>>>++.>..>.>.<<<<.>++.<<<.>---.>>---.>>>.<.<..<.<<<.>
>.>>..>.>..<<<<<-.<.>+.>>>>>..<.<..>-.<+++.>++.<---..>-.>..<<<.<<<.>>.>>
>>..<.<.<<.>+++.<<<.>.>>---.>.>.>..<<<-.<<<.>>>++.>>>..<.>>.<<.<..<--.<<
<.>>>++.>..>.>..<<<<.<<.>>>-..>>>.<.<..<<<-.<.>+.>>>..>.>..<<<<<-.<.>+.>
>>>>..<.<..>-.<+++.>++.<---..>-.>..<<<<<-.<.>+.>>>>>..<.<..<<.<<.>>>..>.
>.>..<<<-.<<<.>>>++.>>>..<.>>.<<.<.<<<-.<...>+.>>>.>.>.<<<<<-.<...>+.>>>
>>.<.<.<<<-.<...>+.>>>.>.>.<<<<<-.<...>+.>>>>>.<.<.<<<-.<...>+.>>>.>.>.<
<<<<-.<...>+.>>>>>.<.<.<<<-.<...>+.>>>.>.>.<<<<<-.<...>+.>>>>>.<.>>.<<<<
<<++.>--.......<.>.......<.>.......<.>.......<.>.......<.>.......<.>....
...<.>.......<.>>>>>>.<<.>.......<.<...<++.>...>.>.......<.<...<.>...>.>
.......<.<...<.>...>.>.......<.<...<.>...>.>>.<<.>..<<<<<---.<.>+.>>>>>.
.<.<..<<<-.<.>+.>>>..>.>..<<<<<-.<.>+.>>>>>..<.<..<<<-.<.>+.>>>..>.>..<<
<<<-.<.>+.>>>>>..<.<..<<<-.<.>+.>>>..>.>..<<<<<-.<.>+.>>>>>..<.<..<<<-.<
.>+.>>>..>.>>.<<.>..<<<<++.<<.>>>---.>>>..<.<..<<.<<.>>>.>..>.>..<<<<.<<
.>>>.>>>..<.<..<<.<<.>>>.>..>.>..<<<<.<<.>>>.>>>..<.<..<<.<<.>>>.>..>.>.
.<<<<.<<.>>>.>>>..<.<..<<.<<.>>>.>..>.>>.<<.>.<<<<<-.<...>+.>>>>>.<.<.<<
<-.<...>+.>>>.>.>.<<<<<-.<...>+.>>>>>.<.<.<<<-.<...>+.>>>.>.>.<<<<<-.<..
.>+.>>>>>.<.<.<<<-.<...>+.>>>.>.>.<<<<<-.<...>+.>>>>>.<.<.<<<-.<...>+.>>
>.>.>>.<<<<<<++.>--.......<.>.......<.>.......<.>.......<.>.......<.>...
....<.>.......<.>.......<.>>>>>>.<<.<.......>.>.......<.<.......>.>.....
..<.<.......>.>.......<.<.......>.>.......<.>>.<<.<.......>.>.......<.<.
......>.>.......<.<.......>.>.......<.<.......>.>.......<.>>.<<.<.......
>.>.......<.<.......>.>.......<.<.......>.>.......<.<.......>.>.......<.
>>.<<.<.......>.>.......<.<.......>.>.......<.<.......>.>.......<.<.....
..>.>.......<.>>.<<<<<<.>.......<.>.......<.>.......<.>.......<.>.......
<.>.......<.>.......<.>.......<.>>>>>>.<<.>.......<.<.......>.>.......<.
<.......>.>.......<.<.......>.>.......<.<.......>.>>.<<.>.......<.<.....
..>.>.......<.<.......>.>.......<.<.......>.>.......<.<.......>.>>.<<.>.
......<.<.......>.>.......<.<.......>.>.......<.<.......>.>.......<.<...
....>.>>.<<.>.......<.<.......>.>.......<.<.......>.>.......<.<.......>.
>.......<.<.......>.>>.<<<<<<.>.......<.>.......<.>.......<.>.......<.>.
......<.>.......<.>.......<.>.......<.>>>>>>.<<.<.......>.>.......<.<...
....>.>.......<.<.......>.>.......<.<.......>.>.......<.>>.<<.<.......>.
>.......<.<.......>.>.......<.<.......>.>.......<.<.......>.>.......<.>>
.<<.<.......>.>.......<.<.......>.>.......<.<.......>.>.......<.<.......
>.>.......<.>>.<<.<.......>.>.......<.<.......>.>.......<.<.......>.>...
....<.<.......>.>.......<.>>.<<<<<<.>.......<.>.......<.>.......<.>.....
..<.>.......<.>.......<.>.......<.>.......<.>>>>>>.<<.>.......<.<.......
>.>.......<.<.......>.>.......<.<.......>.>.......<.<.......>.>>.<<.>...
....<.<.......>.>.......<.<.......>.>.......<.<.......>.>.......<.<.....
..>.>>.<<.>.......<.<.......>.>.......<.<.......>.>.......<.<.......>.>.
......<.<.......>.>>.<<.>.......<.<.......>.>.......<.<.......>.>.......
<.<.......>.>.......<.<.......>.>>.<<<<<<.>.......<.>.......<.>.......<.
>.......<.>.......<.>.......<.>.......<.>.......<.>>>>>>.<<.<...<+++.>..
.>.>.......<.<...<.>...>.>.......<.<...<.>...>.>.......<.<...<.>...>.>..
.....<.>>.<<.<<<<<---..>---.<.>+.>>>..>.>..<<<<<-.<.>+.>>>>>..<.<..<<<-.
<.>+.>>>..>.>..<<<<<-.<.>+.>>>>>..<.<..<<<-.<.>+.>>>..>.>..<<<<<-.<.>+.>
>>>>..<.<..<<<-.<.>+.>>>..>.>..<<<<<-.<.>+.>>>>>..<.>>.<<.<..<<++.>>.<--
-.>..>.>..<<<<.>>.<.>>>..<.<..<<.>>.<.>..>.>..<<<<.>>.<.>>>..<.<..<<.>>.
<.>..>.>..<<<<.>>.<.>>>..<.<..<<.>>.<.>..>.>..<<<<.>>.<.>>>..<.>>.<<.<.<
<-------.>+++...<<.>>>.>.>.<<<<.>...<<.>>>>>.<.<.<<.>...<<.>>>.>.>.<<<<.
>...<<.>>>>>.<.<.<<.>...<<.>>>.>.>.<<<<.>...<<.>>>>>.<.<.<<.>...<<.>>>.>
.>.<<<<.>...<+.>>>>.<.>>.<<<<<++.<++++.......>.<.......>.<.......>.<....
...>.<.......>.<.......>.<.......>.<.......>.>>>>>.<<.>.<<<----.++++.>>.
<<.--.>>>.<.<..<++.<+.+++.>>>.<.>.>..<<<<.>---..>>>..<.<..<.>>.<<<.>>..>
.>..<<<.<<--.>.>>>>..<.<..<<.>..>..>.>..<<<+++.<<+.>.>>>.>.<.<.<----.+++
+.>>.<<.--.>.>.>>.<<.>..<<<--.>.<++.>>>..<.<.<<.>++.<<<.>---.>>---.>.>.>
..<<<.>.<<.>>>>..<.<..<<<-.<.>+.>>>..>.>..<-.<.>++.>..<-.<..<.>.<<.>>..>
.>.<<<<.>+++.<<<.>.>>---.>>>.<.<..<-.>.<++.>..>.>>.<<.>..<<<--.>.<++.>>>
..<.<..<<.>>.<-..>.>.>..<<<<<-.<.>+.>>>>>..<.<..<<<-.<.>+.>>>..>.>..<-.<
.>++.>..<-.<..<<<-.<.>+.>>>..>.>..<<<<.>>.<..>>>.<.<..<-.>.<++.>..>.>>.<
<.>.<<<<-------.>++...<<.>>>>>.<.<.<<.>...<<.>>>.>.>.<<<<.>...<<.>>>>>.<
.<.<<.>...<<.>>>.>.>.<<<<.>...<<.>>>>>.<.<.<<.>...<<.>>>.>.>.<<<<.>...<<
.>>>>>.<.<.<<.>...<<.>>>.>.>>.<<<<<<++.++.......>+++.<.......>.<.......>
.<.......>.<.......>.<.......>.<....>>----.<--.<<.>++.>>+.<<.>>.>.<<-.<-
-..--.>>>>>>."""

#program3は途中でエラーになります。なぜでしょう。
program3 = """
>>>>++>+>++>+>>++<+[  
  [>[>>[>>>>]<<<<[[>>>>+<<<<-]<<<<]>>>>>>]+<]>-
  >>--[+[+++<<<<--]++>>>>--]+[>>>>]<<<<[<<+<+<]<<[
    >>>>>>[[<<<<+>>>>-]>>>>]<<<<<<<<[<<<<]
    >>-[<<+>>-]+<<[->>>>[-[+>>>>-]-<<-[>>>>-]++>>+[-<<<<+]+>>>>]<<<<[<<<<]]
    >[-[<+>-]]+<[->>>>[-[+>>>>-]-<<<-[>>>>-]++>>>+[-<<<<+]+>>>>]<<<<[<<<<]]<<
  ]>>>+[>>>>]-[+<<<<--]++[<<<<]>>>+[
    >-[
      >>[--[++>>+>>--]-<[-[-[+++<<<<-]+>>>>-]]++>+[-<<<<+]++>>+>>]
      <<[>[<-<<<]+<]>->>>
    ]+>[>>>>]-[+<<<<--]++<[
      [>>>>]<<<<[
        -[->--[<->+]++<[[>-<+]++[<<<<]+>>+>>-]++<<<<-]
        >-[+[<+[<<<<]>]<+>]+<[->->>>[-]]+<<<<
      ]
    ]>[<<<<]>[
      -[
        -[
          +++++[>++++++++<-]>-.>>>-[<<<----.<]<[<<]>>[-]>->>+[
            [>>>>]+[-[->>>>+>>>>>>>>-[-[+++<<<<[-]]+>>>>-]++[<<<<]]+<<<<]>>>
          ]+<+<<
        ]>[
          -[
            ->[--[++>>>>--]->[-[-[+++<<<<-]+>>>>-]]++<+[-<<<<+]++>>>>]
            <<<<[>[<<<<]+<]>->>
          ]<
        ]>>>>[--[++>>>>--]-<--[+++>>>>--]+>+[-<<<<+]++>>>>]<<<<<[<<<<]<
      ]>[>+<<++<]<
    ]>[+>[--[++>>>>--]->--[+++>>>>--]+<+[-<<<<+]++>>>>]<<<[<<<<]]>>
  ]>
]
"""

program4 = """
[ This program prints Sierpinski triangle on 80-column display. ]
                                >    
                               + +    
                              +   +    
                             [ < + +    
                            +       +    
                           + +     + +    
                          >   -   ]   >    
                         + + + + + + + +    
                        [               >    
                       + +             + +    
                      <   -           ]   >    
                     > + + >         > > + >    
                    >       >       +       <    
                   < <     < <     < <     < <    
                  <   [   -   [   -   >   +   <    
                 ] > [ - < + > > > . < < ] > > >    
                [                               [    
               - >                             + +    
              +   +                           +   +    
             + + [ >                         + + + +    
            <       -                       ]       >    
           . <     < [                     - >     + <    
          ]   +   >   [                   -   >   +   +    
         + + + + + + + +                 < < + > ] > . [    
        -               ]               >               ]    
       ] +             < <             < [             - [    
      -   >           +   <           ]   +           >   [    
     - < + >         > > - [         - > + <         ] + + >    
    [       -       <       -       >       ]       <       <    
   < ]     < <     < <     ] +     + +     + +     + +     + +    
  +   .   +   +   +   .   [   -   ]   <   ]   +   +   +   +   +    
 * * * * * M a d e * B y : * N Y Y R I K K I * 2 0 0 2 * * * * *  
"""

