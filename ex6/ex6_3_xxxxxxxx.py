# -*- coding: utf-8 -*-
"""ex6-3-XXXXXXXX.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Do-Lq8aERp1Y2c6hgp8g3mbtfO0tm6Be

- ファイル名のXXXXXXXXのところは学籍番号に変更してください
- プログラム中にstudent_numberに自分の学籍番号を入れてください
"""

student_number = 62101046

"""課題3: 簡易マインスイーパ

注意: マインスイーパについて知らない方は"マインスイーパ"でGoogle検索するとなんとGoogle製のマインスイーパが遊べたりするので、まずは遊んでみてください

下のような二次元リストfieldはマインスイーパにおけるフィールドを表しており、0は地雷なし、1は地雷ありをそれぞれ示しているとする (この数字は周囲の地雷の数とは違うことに注意)

```
field = [
  [0, 1, 0, 0],
  [0, 0, 0, 1],
  [0, 0, 0, 0],
]
```

このfieldと座標(X, Y)を与えた時、そこが地雷であれば`-1`を、地雷でなければ周囲8マスにある地雷の数を表した整数値を返すような関数`open_field()`を以下のDocstringに従って実装せよ

ただしここで座標(X,Y)はX座標がfiledの内側のリスト、Y座標がfieldの外側のリストのインデックスを表すものとする。例として、fieldにおける(1, 0)座標の値は"1"である。

```
field = [
  [0, 1, 0, 0], # X=0~3, Y=0
  [0, 0, 0, 1], # X=0~3, Y=1
  [0, 0, 0, 0], # X=0~3, Y=2
]
```

また、`open_field()`に渡す(x,y)座標がfieldのリストの範囲外である場合は今回は気にしなくても良いとする
"""

def open_field(field, x, y):
  """fieldの上のマス目を開け、その結果を返す

  Args:
    field (list[int][int]): マインスイーパにおけるフィールドを表す二次元リスト。0が空きマス、1が地雷マスを示す
    x (int): 開きたいマス目のx座標
    y (int): 開きたいマス目のy座標

  Returns:
    int: 開けたマス目が地雷であれば -1、地雷でなければ周囲8マスになる地雷の数に相当する整数値を返す。またxとyがfieldの外を示す場合は-2を返す
  """
  mine_count = 0
  if 0 <= x and x <= len(field[0])-1 and 0 <= y and y <= len(field)-1:
    if field[y][x] == 1:
      return -1
    else:
      for i in range(x-1, x+2):
        for j in range(y-1, y+2):
          if 0 <= i and i <= len(field[0])-1 and 0 <= j and j <= len(field)-1:
            if field[j][i] == 1:
              mine_count += 1
      return mine_count
  else:
    return -2
                  